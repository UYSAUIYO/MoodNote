import React, { useState, useMemo, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  SafeAreaView,
  StyleSheet,
  Alert,
  ScrollView,
  Modal,
  Dimensions,
  Image,
  PermissionsAndroid,
  Platform,
} from 'react-native';
import { launchCamera, launchImageLibrary, ImagePickerResponse, MediaType } from 'react-native-image-picker';
import { useTheme } from '../theme/ThemeContext';
import CustomTextInput from '../components/CustomTextInput';

const { width } = Dimensions.get('window');

interface WriteDiaryScreenProps {
  onGoBack: () => void;
  onSave?: (diaryData: any) => void;
}

const WriteDiaryScreen: React.FC<WriteDiaryScreenProps> = ({ onGoBack, onSave }) => {
  const { theme } = useTheme();
  
  // Áä∂ÊÄÅÁÆ°ÁêÜ
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [selectedMood, setSelectedMood] = useState<{emoji: string, label: string} | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [showMoodPicker, setShowMoodPicker] = useState(false);
  const [showTagInput, setShowTagInput] = useState(false);
  const [newTag, setNewTag] = useState('');
  const [hasChanges, setHasChanges] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [images, setImages] = useState<string[]>([]);
  const [showImageOptions, setShowImageOptions] = useState(false);
  
  // ÂºïÁî®
  const emojiButtonRef = useRef<any>(null);
  const imageButtonRef = useRef<any>(null);
  
  // ÂøÉÊÉÖÈÄâÈ°π
  const moodOptions = [
    { emoji: 'üòä', label: 'ÂºÄÂøÉ' },
    { emoji: 'üò¢', label: 'ÈöæËøá' },
    { emoji: 'üò§', label: 'Áñ≤ÊÉ´' },
    { emoji: 'üòå', label: 'Âπ≥Èùô' },
    { emoji: 'ü§î', label: 'ÊÄùËÄÉ' },
    { emoji: 'üí™', label: 'Ê¥ªÂäõ' },
    { emoji: 'üò¥', label: 'Âõ∞ÂÄ¶' },
    { emoji: 'ü•∞', label: 'Âπ∏Á¶è' },
    { emoji: 'üò∞', label: 'ÁÑ¶Ëôë' },
    { emoji: 'ü§ó', label: 'Ê∏©Êöñ' },
  ];
  
  // Ë°®ÊÉÖÈÄâÈ°π
  const emojiOptions = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
    'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô',
    'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î',
    'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•',
    'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß',
    'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'üòé', 'ü§ì', 'üßê',
    'üòï', 'üòü', 'üôÅ', 'üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü•∫', 'üò¶', 'üòß',
    'üò®', 'üò∞', 'üò•', 'üò¢', 'üò≠', 'üò±', 'üòñ', 'üò£', 'üòû', 'üòì',
    'üò©', 'üò´', 'ü•±', 'üò§', 'üò°', 'ü§¨', 'üò†', 'ü§Ø', 'üòà', 'üëø',
    'üíÄ', '‚ò†Ô∏è', 'üí©', 'ü§°', 'üëπ', 'üë∫', 'üëª', 'üëΩ', 'üëæ', 'ü§ñ'
  ];
  
  // Ëé∑ÂèñÂΩìÂâçÊó•Êúü
  const getCurrentDate = () => {
    const now = new Date();
    return `${now.getFullYear()}Âπ¥${now.getMonth() + 1}Êúà${now.getDate()}Êó•`;
  };
  
  // ËØ∑Ê±ÇÁõ∏Êú∫ÊùÉÈôê
  const requestCameraPermission = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.CAMERA,
          {
            title: 'Áõ∏Êú∫ÊùÉÈôê',
            message: 'Â∫îÁî®ÈúÄË¶ÅËÆøÈóÆÁõ∏Êú∫Êù•ÊãçÁÖß',
            buttonNeutral: 'Á®çÂêéËØ¢ÈóÆ',
            buttonNegative: 'ÂèñÊ∂à',
            buttonPositive: 'Á°ÆÂÆö',
          },
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } catch (err) {
        console.warn(err);
        return false;
      }
    }
    return true;
  };
  
  // ÊãçÁÖßÂäüËÉΩ
  const handleTakePhoto = async () => {
    const hasPermission = await requestCameraPermission();
    if (!hasPermission) {
      Alert.alert('ÊùÉÈôê‰∏çË∂≥', 'ÈúÄË¶ÅÁõ∏Êú∫ÊùÉÈôêÊâçËÉΩÊãçÁÖß');
      return;
    }
    
    const options = {
      mediaType: 'photo' as MediaType,
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
      quality: 0.8 as any,
    };
    
    launchCamera(options, (response: ImagePickerResponse) => {
      if (response.didCancel || response.errorMessage) {
        return;
      }
      
      if (response.assets && response.assets[0]) {
        const imageUri = response.assets[0].uri;
        if (imageUri) {
          setImages(prev => [...prev, imageUri]);
          setHasChanges(true);
        }
      }
    });
    
    setShowImageOptions(false);
  };
  
  // ÈÄâÊã©ÂõæÁâáÂäüËÉΩ
  const handleSelectImage = () => {
    const options = {
      mediaType: 'photo' as MediaType,
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
      quality: 0.8 as any,
      selectionLimit: 5,
    };
    
    launchImageLibrary(options, (response: ImagePickerResponse) => {
      if (response.didCancel || response.errorMessage) {
        return;
      }
      
      if (response.assets) {
        const newImages = response.assets
          .map(asset => asset.uri)
          .filter((uri): uri is string => uri !== undefined);
        setImages(prev => [...prev, ...newImages]);
        setHasChanges(true);
      }
    });
    
    setShowImageOptions(false);
  };
  
  // Âà†Èô§ÂõæÁâá
  const handleRemoveImage = (imageUri: string) => {
    setImages(prev => prev.filter(uri => uri !== imageUri));
    setHasChanges(true);
  };
  
  // ÊèíÂÖ•Ë°®ÊÉÖÂà∞ÂÜÖÂÆπ
  const handleInsertEmoji = (emoji: string) => {
    setContent(prev => prev + emoji);
    setHasChanges(true);
    setShowEmojiPicker(false);
  };
  
  // Â§ÑÁêÜËøîÂõû
  const handleGoBack = () => {
    if (hasChanges && (title.trim() || content.trim())) {
      Alert.alert(
        '‰øùÂ≠òËçâÁ®ø',
        'ÊòØÂê¶‰øùÂ≠òÂΩìÂâçÂÜÖÂÆπ‰∏∫ËçâÁ®øÔºü',
        [
          { text: '‰∏ç‰øùÂ≠ò', onPress: onGoBack, style: 'destructive' },
          { text: 'ÂèñÊ∂à', style: 'cancel' },
          { text: '‰øùÂ≠òËçâÁ®ø', onPress: handleSaveDraft },
        ]
      );
    } else {
      onGoBack();
    }
  };
  
  // ‰øùÂ≠òËçâÁ®ø
  const handleSaveDraft = () => {
    // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞ËçâÁ®ø‰øùÂ≠òÈÄªËæë
    Alert.alert('ÊèêÁ§∫', 'ËçâÁ®øÂ∑≤‰øùÂ≠ò', [{ text: 'Á°ÆÂÆö', onPress: onGoBack }]);
  };
  
  // ‰øùÂ≠òÊó•ËÆ∞
  const handleSave = () => {
    if (!title.trim()) {
      Alert.alert('ÊèêÁ§∫', 'ËØ∑ËæìÂÖ•Êó•ËÆ∞Ê†áÈ¢ò');
      return;
    }
    if (!content.trim()) {
      Alert.alert('ÊèêÁ§∫', 'ËØ∑ËæìÂÖ•Êó•ËÆ∞ÂÜÖÂÆπ');
      return;
    }
    
    const diaryData = {
      title: title.trim(),
      content: content.trim(),
      mood: selectedMood,
      tags,
      date: new Date(),
    };
    
    if (onSave) {
      onSave(diaryData);
    }
    
    Alert.alert('ÊàêÂäü', 'Êó•ËÆ∞‰øùÂ≠òÊàêÂäüÔºÅ', [{ text: 'Á°ÆÂÆö', onPress: onGoBack }]);
  };
  
  // ÈÄâÊã©ÂøÉÊÉÖ
  const handleSelectMood = (mood: {emoji: string, label: string}) => {
    setSelectedMood(mood);
    setShowMoodPicker(false);
    setHasChanges(true);
  };
  
  // Ê∑ªÂä†Ê†áÁ≠æ
  const handleAddTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
      setHasChanges(true);
    }
    setShowTagInput(false);
  };
  
  // Âà†Èô§Ê†áÁ≠æ
  const handleRemoveTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
    setHasChanges(true);
  };
  
  // Â§ÑÁêÜÊñáÊú¨ÂèòÂåñ
  const handleTextChange = (text: string, type: 'title' | 'content') => {
    if (type === 'title') {
      setTitle(text);
    } else {
      setContent(text);
    }
    setHasChanges(true);
  };
  
  const styles = useMemo(() => StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.colors.background,
    },
    header: {
      marginTop: 35,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: theme.spacing.lg,
      paddingVertical: theme.spacing.md,
      backgroundColor: theme.colors.surface,
      borderBottomWidth: 1,
      borderBottomColor: theme.colors.inputBorder,
    },
    backButton: {
      padding: theme.spacing.sm,
      borderRadius: theme.borderRadius.md,
      backgroundColor: theme.colors.textSecondary + '20',
    },
    backButtonText: {
      fontSize: 18,
      color: theme.colors.textSecondary,
      fontWeight: '600',
    },
    saveButton: {
      paddingHorizontal: theme.spacing.lg,
      paddingVertical: theme.spacing.sm,
      borderRadius: theme.borderRadius.md,
      backgroundColor: theme.colors.primary,
    },
    saveButtonText: {
      fontSize: 16,
      color: theme.colors.buttonText,
      fontWeight: '600',
    },
    dateContainer: {
      alignItems: 'center',
      paddingVertical: theme.spacing.lg,
      backgroundColor: theme.colors.surface,
    },
    dateText: {
      fontSize: 18,
      fontWeight: '600',
      color: theme.colors.text,
    },
    contentContainer: {
      flex: 1,
      paddingHorizontal: theme.spacing.lg,
    },
    titleInput: {
      marginTop: theme.spacing.lg,
      fontSize: 18,
      fontWeight: '600',
      minHeight: 52,
    },
    contentInput: {
      marginTop: theme.spacing.md,
      flex: 1,
      fontSize: 16,
      textAlignVertical: 'top',
      minHeight: 200,
    },
    selectedMoodContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      marginTop: theme.spacing.md,
      paddingHorizontal: theme.spacing.md,
      paddingVertical: theme.spacing.sm,
      backgroundColor: theme.colors.primary + '20',
      borderRadius: theme.borderRadius.md,
      alignSelf: 'flex-start',
    },
    selectedMoodEmoji: {
      fontSize: 20,
      marginRight: theme.spacing.xs,
    },
    selectedMoodText: {
      fontSize: 14,
      color: theme.colors.primary,
      fontWeight: '500',
    },
    tagsContainer: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      marginTop: theme.spacing.md,
    },
    tag: {
      backgroundColor: theme.colors.primary + '20',
      borderRadius: theme.borderRadius.sm,
      paddingHorizontal: theme.spacing.sm,
      paddingVertical: theme.spacing.xs,
      marginRight: theme.spacing.xs,
      marginBottom: theme.spacing.xs,
      flexDirection: 'row',
      alignItems: 'center',
    },
    tagText: {
      fontSize: 12,
      color: theme.colors.primary,
      fontWeight: '500',
      marginRight: theme.spacing.xs,
    },
    tagRemove: {
      fontSize: 14,
      color: theme.colors.primary,
      fontWeight: 'bold',
    },
    bottomToolbar: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: theme.spacing.lg,
      paddingVertical: theme.spacing.md,
      backgroundColor: theme.colors.surface,
      borderTopWidth: 1,
      borderTopColor: theme.colors.inputBorder,
    },
    toolButton: {
      padding: theme.spacing.sm,
      borderRadius: theme.borderRadius.md,
      backgroundColor: theme.colors.background,
      marginRight: theme.spacing.sm,
      minWidth: 44,
      alignItems: 'center',
    },
    toolButtonText: {
      fontSize: 20,
    },
    // Ê®°ÊÄÅÊ°ÜÊ†∑Âºè
    modalOverlay: {
      flex: 1,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      justifyContent: 'center',
      alignItems: 'center',
    },
    modalContainer: {
      backgroundColor: theme.colors.surface,
      borderRadius: theme.borderRadius.xl,
      padding: theme.spacing.xl,
      width: width * 0.9,
      maxHeight: '70%',
    },
    modalTitle: {
      fontSize: 18,
      fontWeight: '700',
      color: theme.colors.text,
      textAlign: 'center',
      marginBottom: theme.spacing.lg,
    },
    moodGrid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
    },
    moodOption: {
      width: '30%',
      alignItems: 'center',
      paddingVertical: theme.spacing.md,
      marginBottom: theme.spacing.sm,
      borderRadius: theme.borderRadius.md,
      backgroundColor: theme.colors.background,
    },
    moodOptionSelected: {
      backgroundColor: theme.colors.primary + '20',
    },
    moodEmoji: {
      fontSize: 32,
      marginBottom: theme.spacing.xs,
    },
    moodLabel: {
      fontSize: 12,
      color: theme.colors.text,
      fontWeight: '500',
    },
    tagInputContainer: {
      marginTop: theme.spacing.md,
    },
    tagInput: {
      fontSize: 16,
      marginBottom: theme.spacing.md,
    },
    modalButtons: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      marginTop: theme.spacing.lg,
    },
    modalButton: {
      flex: 1,
      paddingVertical: theme.spacing.md,
      borderRadius: theme.borderRadius.md,
      alignItems: 'center',
      marginHorizontal: theme.spacing.xs,
    },
    cancelButton: {
      backgroundColor: theme.colors.textSecondary + '20',
    },
    confirmButton: {
      backgroundColor: theme.colors.primary,
    },
    modalButtonText: {
      fontSize: 16,
      fontWeight: '600',
    },
    cancelButtonText: {
      color: theme.colors.textSecondary,
    },
    confirmButtonText: {
      color: theme.colors.buttonText,
    },
    // Ë°®ÊÉÖÈÄâÊã©Âô®Ê†∑Âºè
    emojiPickerContainer: {
      position: 'absolute',
      bottom: 80,
      left: theme.spacing.lg,
      right: theme.spacing.lg,
      backgroundColor: theme.colors.surface,
      borderRadius: theme.borderRadius.lg,
      padding: theme.spacing.md,
      maxHeight: 200,
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2,
      },
      shadowOpacity: 0.25,
      shadowRadius: 3.84,
      elevation: 5,
    },
    emojiGrid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between',
    },
    emojiItem: {
      width: '10%',
      aspectRatio: 1,
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: theme.spacing.xs,
    },
    emojiText: {
      fontSize: 20,
    },
    // ÂõæÁâáÁõ∏ÂÖ≥Ê†∑Âºè
    imagesContainer: {
      marginTop: theme.spacing.md,
    },
    imagesList: {
      flexDirection: 'row',
      flexWrap: 'wrap',
    },
    imageItem: {
      width: 80,
      height: 80,
      marginRight: theme.spacing.sm,
      marginBottom: theme.spacing.sm,
      borderRadius: theme.borderRadius.md,
      overflow: 'hidden',
      position: 'relative',
    },
    imagePreview: {
      width: '100%',
      height: '100%',
    },
    imageRemoveButton: {
      position: 'absolute',
      top: -5,
      right: -5,
      width: 20,
      height: 20,
      borderRadius: 10,
      backgroundColor: theme.colors.error || '#ff4444',
      justifyContent: 'center',
      alignItems: 'center',
    },
    imageRemoveText: {
      color: 'white',
      fontSize: 12,
      fontWeight: 'bold',
    },
    // ÂõæÁâáÈÄâÈ°πÊ®°ÊÄÅÊ°Ü
    imageOptionsContainer: {
      backgroundColor: theme.colors.surface,
      borderRadius: theme.borderRadius.lg,
      padding: theme.spacing.lg,
      width: width * 0.8,
    },
    imageOptionButton: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingVertical: theme.spacing.md,
      borderBottomWidth: 1,
      borderBottomColor: theme.colors.inputBorder,
    },
    imageOptionIcon: {
      fontSize: 24,
      marginRight: theme.spacing.md,
    },
    imageOptionText: {
      fontSize: 16,
      color: theme.colors.text,
      fontWeight: '500',
    },
  }), [theme]);
  
  return (
    <SafeAreaView style={styles.container}>
      {/* Â§¥ÈÉ®ÂØºËà™ */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={handleGoBack}>
          <Text style={styles.backButtonText}>‚Äπ</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
          <Text style={styles.saveButtonText}>‰øùÂ≠ò</Text>
        </TouchableOpacity>
      </View>
      
      {/* Êó•ÊúüÊòæÁ§∫ */}
      <View style={styles.dateContainer}>
        <Text style={styles.dateText}>{getCurrentDate()}</Text>
      </View>
      
      {/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */}
      <ScrollView style={styles.contentContainer} showsVerticalScrollIndicator={false}>
        {/* Ê†áÈ¢òËæìÂÖ• */}
        <CustomTextInput
          placeholder="ËØ∑ËæìÂÖ•Êó•ËÆ∞Ê†áÈ¢ò..."
          value={title}
          onChangeText={(text) => handleTextChange(text, 'title')}
          maxLength={50}
          style={styles.titleInput}
        />
        
        {/* ÂÜÖÂÆπËæìÂÖ• */}
        <CustomTextInput
          placeholder="ËÆ∞ÂΩï‰Ω†ÁöÑÂøÉÊÉÖÂíåÊÉ≥Ê≥ï..."
          value={content}
          onChangeText={(text) => handleTextChange(text, 'content')}
          multiline
          style={styles.contentInput}
        />
        
        {/* ÈÄâ‰∏≠ÁöÑÂøÉÊÉÖÊòæÁ§∫ */}
        {selectedMood && (
          <View style={styles.selectedMoodContainer}>
            <Text style={styles.selectedMoodEmoji}>{selectedMood.emoji}</Text>
            <Text style={styles.selectedMoodText}>ÂøÉÊÉÖÔºö{selectedMood.label}</Text>
          </View>
        )}
        
        {/* Ê†áÁ≠æÊòæÁ§∫ */}
        {tags.length > 0 && (
          <View style={styles.tagsContainer}>
            {tags.map((tag, index) => (
              <View key={index} style={styles.tag}>
                <Text style={styles.tagText}>{tag}</Text>
                <TouchableOpacity onPress={() => handleRemoveTag(tag)}>
                  <Text style={styles.tagRemove}>√ó</Text>
                </TouchableOpacity>
              </View>
            ))}
          </View>
        )}
        
        {/* ÂõæÁâáÊòæÁ§∫ */}
        {images.length > 0 && (
          <View style={styles.imagesContainer}>
            <View style={styles.imagesList}>
              {images.map((imageUri, index) => (
                <View key={index} style={styles.imageItem}>
                  <Image source={{ uri: imageUri }} style={styles.imagePreview} />
                  <TouchableOpacity
                    style={styles.imageRemoveButton}
                    onPress={() => handleRemoveImage(imageUri)}
                  >
                    <Text style={styles.imageRemoveText}>√ó</Text>
                  </TouchableOpacity>
                </View>
              ))}
            </View>
          </View>
        )}
      </ScrollView>
      
      {/* Â∫ïÈÉ®Â∑•ÂÖ∑Ê†è */}
      <View style={styles.bottomToolbar}>
        <TouchableOpacity 
          style={styles.toolButton} 
          onPress={() => setShowMoodPicker(true)}
        >
          <Text style={styles.toolButtonText}>üòä</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          ref={emojiButtonRef}
          style={styles.toolButton}
          onPress={() => setShowEmojiPicker(!showEmojiPicker)}
        >
          <Text style={styles.toolButtonText}>üòÄ</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          ref={imageButtonRef}
          style={styles.toolButton}
          onPress={() => setShowImageOptions(true)}
        >
          <Text style={styles.toolButtonText}>üñºÔ∏è</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.toolButton}
          onPress={handleTakePhoto}
        >
          <Text style={styles.toolButtonText}>üì∑</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.toolButton} 
          onPress={() => setShowTagInput(true)}
        >
          <Text style={styles.toolButtonText}>#</Text>
        </TouchableOpacity>
      </View>
      
      {/* ÂøÉÊÉÖÈÄâÊã©Ê®°ÊÄÅÊ°Ü */}
      <Modal
        visible={showMoodPicker}
        transparent
        animationType="fade"
        onRequestClose={() => setShowMoodPicker(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>ÈÄâÊã©ÂøÉÊÉÖ</Text>
            <ScrollView>
              <View style={styles.moodGrid}>
                {moodOptions.map((mood, index) => (
                  <TouchableOpacity
                    key={index}
                    style={[
                      styles.moodOption,
                      selectedMood?.emoji === mood.emoji && styles.moodOptionSelected
                    ]}
                    onPress={() => handleSelectMood(mood)}
                  >
                    <Text style={styles.moodEmoji}>{mood.emoji}</Text>
                    <Text style={styles.moodLabel}>{mood.label}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => setShowMoodPicker(false)}
              >
                <Text style={[styles.modalButtonText, styles.cancelButtonText]}>ÂèñÊ∂à</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
      
      {/* Ê†áÁ≠æËæìÂÖ•Ê®°ÊÄÅÊ°Ü */}
      <Modal
        visible={showTagInput}
        transparent
        animationType="fade"
        onRequestClose={() => setShowTagInput(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <Text style={styles.modalTitle}>Ê∑ªÂä†Ê†áÁ≠æ</Text>
            <View style={styles.tagInputContainer}>
              <CustomTextInput
                placeholder="ËæìÂÖ•Ê†áÁ≠æÂêçÁß∞..."
                value={newTag}
                onChangeText={setNewTag}
                maxLength={20}
                style={styles.tagInput}
              />
            </View>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => {
                  setShowTagInput(false);
                  setNewTag('');
                }}
              >
                <Text style={[styles.modalButtonText, styles.cancelButtonText]}>ÂèñÊ∂à</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalButton, styles.confirmButton]}
                onPress={handleAddTag}
              >
                <Text style={[styles.modalButtonText, styles.confirmButtonText]}>Ê∑ªÂä†</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
      
      {/* Ë°®ÊÉÖÈÄâÊã©Âô® */}
      {showEmojiPicker && (
        <TouchableOpacity 
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
          }}
          activeOpacity={1}
          onPress={() => setShowEmojiPicker(false)}
        >
          <View style={styles.emojiPickerContainer}>
            <TouchableOpacity activeOpacity={1} onPress={(e) => e.stopPropagation()}>
              <ScrollView showsVerticalScrollIndicator={false}>
                <View style={styles.emojiGrid}>
                  {emojiOptions.map((emoji, index) => (
                    <TouchableOpacity
                      key={index}
                      style={styles.emojiItem}
                      onPress={() => handleInsertEmoji(emoji)}
                    >
                      <Text style={styles.emojiText}>{emoji}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </ScrollView>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      )}
      
      {/* ÂõæÁâáÈÄâÈ°πÊ®°ÊÄÅÊ°Ü */}
      <Modal
        visible={showImageOptions}
        transparent
        animationType="fade"
        onRequestClose={() => setShowImageOptions(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.imageOptionsContainer}>
            <TouchableOpacity
              style={styles.imageOptionButton}
              onPress={handleTakePhoto}
            >
              <Text style={styles.imageOptionIcon}>üì∑</Text>
              <Text style={styles.imageOptionText}>ÊãçÁÖß</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[styles.imageOptionButton, { borderBottomWidth: 0 }]}
              onPress={handleSelectImage}
            >
              <Text style={styles.imageOptionIcon}>üñºÔ∏è</Text>
              <Text style={styles.imageOptionText}>‰ªéÁõ∏ÂÜåÈÄâÊã©</Text>
            </TouchableOpacity>
            
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => setShowImageOptions(false)}
              >
                <Text style={[styles.modalButtonText, styles.cancelButtonText]}>ÂèñÊ∂à</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

export default WriteDiaryScreen;